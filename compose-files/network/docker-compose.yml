version: "3.9"
services:
  ########## Network Stack ##########

  ## Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    restart: always
    privileged: true
    networks:
      - socket_proxy
    ports:
        - 2375:2375
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1 # Needed for Ouroboros
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 #
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1
      - INFO=1
      - NETWORKS=1 #
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 #
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 #
      - VOLUMES=1

  ## Traefik - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:latest
    # profiles:
    #   - traefik-network
    restart: always
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # - --entrypoints.web.address=:80
      # - --entrypoints.websecure.address=:443
      - --api=true
      # - --api.insecure=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accesslog=true
      - --accesslog.filepath=/logs/access.log
      - --accesslog.filters.statuscodes=400-499
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines      
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # My docker-socket-proxy
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      #      - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --entrypoints.https.http.tls.certresolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAIN # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAIN # Pulls wildcard cert for second domain
      - --certificatesResolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=${DNS_RESOLVER} # pihole IP
      # Enable Hub communication (open the port 9900 and 9901 by default)
      - --metrics.prometheus.addrouterslabels=true
    networks:
      traefik_proxy:
        ipv4_address: 192.168.50.254
      socket_proxy:
        #healthcheck:
        #  test: ["CMD", "traefik", "healthcheck", "--ping"]
        #  interval: 5s
        #  retries: 3
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    security_opt:
      - no-new-privileges:true # https://docs.docker.com/engine/reference/run/#security-configuration
    volumes:
      - $DOCKER_DIR/traefik/rules:/rules # file provider directory
      # - /var/run/docker.sock:/var/run/docker.sock:ro # Connect to docker-socket-proxy tcp://docker-socket-proxy:2375
      - $DOCKER_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKER_DIR/traefik/logs:/logs # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    #      - CF_API_EMAIL_FILE=/run/secrets/cf-api-email
    #      - CF_API_KEY_FILE=/run/secrets/cf-api-key
    # secrets:
    #   - "cf-api-email"
    #   - "cf-api-key"
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## API Forward Auth Bypass # Used for willfantom/SUI - automatic traefik dashboard
      - "traefik.http.routers.traefik-bypass.entrypoints=https"
      - "traefik.http.routers.traefik-bypass.rule=Host(`traefik.${DOMAIN_NAME}`) && PathPrefix(`/api/`)"
      # - "traefik.http.middlewares.traefik-basicauth.basicauth.users=$MY_USERNAME:$TRAEFIK_PASSWORD" # password must be htpasswd hash
      - "traefik.http.routers.traefik-bypass.priority=20"
      - "traefik.http.routers.traefik-bypass.service=api@internal"
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    restart: always
    network_mode: "host"
    depends_on:
      - traefik
      - socket-proxy
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /var/log:/var/log:ro
      - $DOCKER_DIR/data/fail2ban:/data
      - $DOCKER_DIR/traefik/logs:/traefik/logs:ro

  ## Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    depends_on:
      - socket-proxy
    networks:
      socket_proxy:
    security_opt:
      - no-new-privileges:true
    environment:
      - TIMEZONE
      - TRAEFIK_VERSION=2
      - CF_EMAIL=${CLOUDFLARE_EMAIL} # Same as traefik
      - CF_TOKEN=${CLOUDFLARE_API_KEY} # Same as traefik
      - TARGET_DOMAIN=${DOMAIN_NAME}
      - DOMAIN1=${DOMAIN_NAME}
      - DOMAIN1_ZONE_ID=${CLOUDFLARE_COMPANION_ZONE_ID} # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
      - DOCKER_HOST=tcp://socket-proxy:2375
      # - DOMAIN2=$DOMAIN
      # - DOMAIN2_ZONE_ID=$ZONE_ID_2 # Copy from Cloudflare Overview page
      # - DOMAIN2_PROXIED=TRUE

      ## Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    container_name: cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=${CLOUDFLARE_DDNS_API_TOKEN}
      - ZONE=${DOMAIN_NAME}
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true
