
services:
  ########## Network Stack ##########

  ## Docker Socket Proxy - Security Enchanced Proxy for Docker Socket
  socket-proxy:
    container_name: socket-proxy
    image: tecnativa/docker-socket-proxy:latest
    restart: always
    privileged: true
    networks:
      - socket_proxy
    ports:
        - 2375:2375
    security_opt:
      - no-new-privileges:true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LOG_LEVEL=info # debug,info,notice,warning,err,crit,alert,emerg
      - EVENTS=1
      - PING=1
      - VERSION=1
      - AUTH=0
      - SECRETS=0
      - POST=1 # Needed for Ouroboros
      - BUILD=0
      - COMMIT=0
      - CONFIGS=0
      - CONTAINERS=1 #
      - DISTRIBUTION=0
      - EXEC=0
      - IMAGES=1
      - INFO=1
      - NETWORKS=1 #
      - NODES=0
      - PLUGINS=0
      - SERVICES=1 #
      - SESSION=0
      - SWARM=0
      - SYSTEM=0
      - TASKS=1 #
      - VOLUMES=1

  ## Traefik - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:latest
    # profiles:
    #   - traefik-network
    restart: always
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
      - --api=true
      - --log=true
      - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accesslog=true
      - --accesslog.filepath=/logs/access.log
      - --accesslog.format=json
      - --accesslog.filters.statuscodes=400-499
      - --accessLog.bufferingSize=0 # Configuring a buffer of 100 lines      
      - --accesslog.fields.headers.defaultmode=drop
      - --accesslog.fields.headers.names.User-Agent=keep
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://socket-proxy:2375 # My docker-socket-proxy
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      # - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certresolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${DOMAIN_NAME}
      - --entrypoints.https.http.tls.domains[0].sans=*.${DOMAIN_NAME}
      - --certificatesResolvers.cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --certificatesResolvers.cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=${DNS_RESOLVER} # pihole IP
      - --metrics.prometheus.addrouterslabels=true
    networks:
      cloudflared:
      traefik_proxy:
      socket_proxy:
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - $DOCKER_DIR/traefik/rules:/rules # file provider directory
      - $DOCKER_DIR/traefik/acme/acme.json:/acme.json # cert location - you must touch this file and change permissions to 600
      - $DOCKER_DIR/traefik/logs:/logs # for fail2ban - make sure to touch file before starting container
    environment:
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3

  # CrowdSec - Open-source & collaborative security IPS
  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec
    ports:
      - "8998:8080"
    networks:
      traefik_proxy:
      socket_proxy:
      # - "$CROWDSEC_PROMETHEUS_EXPORT:6060" # For metrics export to Prometheus database.
      # - "$ZEROTIER_IP_WEBSERVER:$CROWDSEC_PROMETHEUS_EXPORT:6060" # If you don't use ZeroTier remove use just $CROWDSEC_PROMETHEUS_EXPORT:6060
    environment:
      COLLECTIONS: "crowdsecurity/traefik crowdsecurity/http-cve crowdsecurity/whitelist-good-actors crowdsecurity/iptables crowdsecurity/linux crowdsecurity/nginx crowdsecurity/sshd"
      CUSTOM_HOSTNAME: louhome
    volumes:
      - $DOCKER_DIR/logs/crowdsec/web:/logs/web:ro
      - $DOCKER_DIR/traefik/logs:/logs/traefik:ro
      - /var/log:/var/log:ro
      - $DOCKER_DIR/data/crowdsec/data:/var/lib/crowdsec/data
      - $DOCKER_DIR/data/crowdsec/config:/etc/crowdsec
    restart: unless-stopped

  # CrowdSec Bouncer - Traefik
  # sudo docker exec crowdsec cscli bouncer add traefik-bouncer
  crowdsec-traefik-bouncer:
    image: fbonalair/traefik-crowdsec-bouncer:latest
    container_name: crowdsec-traefik-bouncer
    depends_on: 
      - crowdsec
    ports:
      - "8997:8080"
    networks:
      traefik_proxy:
      socket_proxy:
    environment:
      GIN_MODE: release # default is debug (more logs)
      CROWDSEC_BOUNCER_API_KEY: $CROWDSEC_BOUNCER_TRAEFIK_API_KEY # sudo docker exec crowdsec cscli bouncers add traefik-bouncer
      CROWDSEC_AGENT_HOST: crowdsec:8080 # CrowdSec host and port
      CROWDSEC_BOUNCER_LOG_LEVEL: 2 # https://pkg.go.dev/github.com/rs/zerolog#readme-leveled-logging
    restart: unless-stopped

  fail2ban:
    container_name: fail2ban
    image: crazymax/fail2ban:latest
    restart: always
    network_mode: "host"
    depends_on:
      - traefik
      - socket-proxy
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - /var/log:/var/log:ro
      - $DOCKER_DIR/data/fail2ban:/data
      - $DOCKER_DIR/traefik/logs:/traefik/logs:ro

  # ## Cloudflare-Companion - Automatic CNAME DNS Creation
  # cf-companion:
  #   container_name: cf-companion
  #   image: tiredofit/traefik-cloudflare-companion:latest
  #   restart: always
  #   depends_on:
  #     - socket-proxy
  #   networks:
  #     socket_proxy:
  #   security_opt:
  #     - no-new-privileges:true
  #   environment:
  #     - TIMEZONE
  #     - TRAEFIK_VERSION=2
  #     - CF_EMAIL=${CLOUDFLARE_EMAIL} # Same as traefik
  #     - CF_TOKEN=${CLOUDFLARE_API_KEY} # Same as traefik
  #     - TARGET_DOMAIN=${DOMAIN_NAME}
  #     - DOMAIN1=${DOMAIN_NAME}
  #     - DOMAIN1_ZONE_ID=${CLOUDFLARE_COMPANION_ZONE_ID} # Copy from Cloudflare Overview page
  #     - DOMAIN1_PROXIED=TRUE
  #     - DOCKER_HOST=tcp://socket-proxy:2375
  #     # - DOMAIN2=$DOMAIN
  #     # - DOMAIN2_ZONE_ID=$ZONE_ID_2 # Copy from Cloudflare Overview page
  #     # - DOMAIN2_PROXIED=TRUE

  #     ## Cloudflare DDNS - Dynamic DNS Updater
  # cf-ddns:
  #   container_name: cf-ddns
  #   image: oznu/cloudflare-ddns:latest
  #   restart: always
  #   environment:
  #     - API_KEY=${CLOUDFLARE_DDNS_API_TOKEN}
  #     - ZONE=${DOMAIN_NAME}
  #     - PROXIED=true
  #     - RRTYPE=A
  #     - DELETE_ON_STOP=false
  #     - DNS_SERVER=1.1.1.1

  cf-tunnel:
    image: cloudflare/cloudflared:latest
    container_name: cf-tunnel
    restart: 'unless-stopped'
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      cloudflared:
    command: tunnel --no-autoupdate run

  nginx-demo:
    image: nginxdemos/hello
    container_name: nginx-demo
    restart: 'unless-stopped'
    ports: 
      - "1337:80"
    networks:
      traefik_proxy:
    labels:
      - "traefik.enable=true"
      # HTTP Routers
      - "traefik.http.routers.nginx-rtr.entrypoints=https"
      - traefik.http.routers.nginx-rtr.rule=Host(`nginx.${DOMAIN_NAME}`)
      - traefik.http.services.nginx-rtr.loadbalancer.server.port=80

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true
  cloudflared:
    external: true