version: "3.9"
services:

  ########## Container Monitoring ##########

  ## UptimeKuma - Endpoint Monitoring
  # uptimekuma:
  #   container_name: uptimekuma
  #   image: louislam/uptime-kuma:latest
  #   restart: always
  #   networks:
  #     - traefik_proxy
  #     - socket_proxy
  #   ports:
  #     - "3002:3002"
  #   security_opt:
  #     - no-new-privileges:true
  #   volumes:
  #     - $DOCKER_DIR/configs/uptime-kuma/:/app/data
  #   labels:
  #     - "traefik.enable=true"
  #     ## HTTP Routers
  #     - "traefik.http.routers.uptime-kuma-rtr.entrypoints=https"
  #     - "traefik.http.routers.uptime-kuma-rtr.rule=Host(`uptime.${DOMAIN_NAME}`)"
  #     ## Middlewares
  #     - "traefik.http.routers.uptimekuma-rtr.middlewares=chain-oauth@file"
  #     ## HTTP Services
  #     - "traefik.http.routers.uptime-kuma-rtr.service=uptime-kuma-svc"
  #     - "traefik.http.services.uptime-kuma-svc.loadbalancer.server.port=3001"

  dash:
    image: mauricenino/dashdot:latest
    container_name: dash
    restart: unless-stopped
    privileged: true
    networks:
      - traefik_proxy
      - socket_proxy
    ports:
      - 8082:3001
    volumes:
      - /:/mnt/host:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dash-rtr.entrypoints=https"
      - "traefik.http.routers.dash-rtr.rule=Host(`dash.${DOMAIN_NAME}`)"
      ## Middlewares
      - "traefik.http.routers.dash-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dash-rtr.service=dash-svc"
      - "traefik.http.services.dash-svc.loadbalancer.server.port=3001"
      ## HTTP Headers
      - "traefik.http.middlewares.cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.cors.headers.customFrameOptionsValue=SAMEORIGIN"

  ## Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: always
    networks:
      - traefik_proxy
      - socket_proxy
    ports:
      - 3661:8080
    security_opt:
      - no-new-privileges:true
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
      DOCKER_HOST: tcp://socket-proxy:2375
    # volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock # Use Docker Socket Proxy instead for improved security
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.dozzle-rtr.entrypoints=https"
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.${DOMAIN_NAME}`)"
      ## Middlewares
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  ## Tautulli â€“ Monitoring Plex Usage
  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli:latest
    restart: always
    networks:
      traefik_proxy:
        ipv4_address: 192.168.50.243
    ports:
      - "8181:8181"
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/configs/plex/Library/Application Support/Plex Media Server/Logs:/logs:ro # Plex Log Directory
      - $DOCKER_DIR/configs/tautulli:/config
    environment:
      - PUID
      - PGID
      - TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.tautulli-rtr.entrypoints=https"
      - "traefik.http.routers.tautulli-rtr.rule=Host(`tautulli.${DOMAIN_NAME}`)"
      - "traefik.http.routers.tautulli-rtr.priority=10"
      ## Middlewares
      - "traefik.http.routers.tautulli-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.tautulli-rtr.service=tautulli-svc"
      - "traefik.http.services.tautulli-svc.loadbalancer.server.port=8181"
      ## API
      - "traefik.http.routers.tautulliAPI-rtr.entrypoints=https"
      - "traefik.http.routers.tautulliAPI-rtr.rule=Host(`tautulli.${DOMAIN_NAME}`) && (Headers(`X-Api-Key`, `${TAUTULLI_API_KEY}`) || Query(`apikey`, `${TAUTULLI_API_KEY}`))"
      - "traefik.http.routers.tautulliAPI-rtr.priority=20"
      - "traefik.http.routers.tautulliAPI-rtr.middlewares=basic-chain@file"
      - "traefik.http.routers.tautulliAPI-rtr.service=tautulli-svc"

  ## Glances - Container and System Monitor
  glances:
    container_name: glances
    image: nicolargo/glances:3.3.0.1
    pid: host
    restart: always
    networks:
      - traefik_proxy
      - socket_proxy
    ports:
      - 61208:61208
    security_opt:
      - no-new-privileges:true
    volumes:
      - $DOCKER_DIR/configs/glances:/glances/conf # Use this if you want to add a glances.conf file
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - GLANCES_OPT=--webserver
      - TZ
      - DOCKER_HOST=tcp://socket-proxy:2375
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.glances-rtr.entrypoints=https"
      - "traefik.http.routers.glances-rtr.rule=Host(`glances.${DOMAIN_NAME}`)"
      ## Middlewares
      - "traefik.http.routers.glances-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.glances-rtr.service=glances-svc"
      - "traefik.http.services.glances-svc.loadbalancer.server.port=61208"

  ## Grafana
  grafana:
    user: $PUID
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    networks:
      - traefik_proxy
      - influxdb
    ports:
      - "3000:3000"
    security_opt:
      - no-new-privileges:true
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - $DOCKER_DIR/data/grafana:/var/lib/grafana
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.grafana-rtr.entrypoints=https"
      - "traefik.http.routers.grafana-rtr.rule=Host(`grafana.${DOMAIN_NAME}`)"
      ## Middlewares
      - "traefik.http.routers.grafana-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.grafana-rtr.service=grafana-svc"
      - "traefik.http.services.grafana-svc.loadbalancer.server.port=3000"

networks:
  traefik_proxy:
    external: true
  socket_proxy:
    external: true
  influxdb:
    external: true
